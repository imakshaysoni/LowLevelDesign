from LowLevelDesign.VendingMachine.states.state import Statefrom LowLevelDesign.VendingMachine.states.dispenser import ProductDispenseclass HasCash(State):    def __init__(self):        super().__init__()    def select_product(self):        exchange_amount = 0        code = input("Enter Product code")        if len(code) > 3:            return "Invalid Input"        #        product_details = self.inventory.get_product_detail(code)        if(product_details.stock==0):            return "Product not available"        if (self.amount > product_details.cost):            return "Insufficient Amount, Please add more cash"        if(self.amount> product_details.cost):            exchange_amount = self.amount - product_details.cost        if exchange_amount:            self.return_exchange(exchange_amount)        next_state = ProductDispense()        self.change_state(next_state)    def return_exchange(self, amount):        return f"Exchange Amount: {amount}"    def cancel(self):        from LowLevelDesign.VendingMachine.states.idle_state import IdleState        print("Process Cancelled.")        next_state = IdleState()        self.change_state(next_state)